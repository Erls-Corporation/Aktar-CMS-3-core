@CLASS
int2str

#
# Методы класса можно использовать как статические.
#
# @int2str[i;gender;upper]
#				Записываем число прописью.
#				i - число (int)
#				gender - род (мужской - m и женский - f)
#				upper - если определена, пишем число с большой буквы
# @money2str[amount]
#				Записываем double в виде: число прописью рублей цифрой копеек
#				amount - сколько денег.
#				Целая часть - рубли, первые две цифры дробной части - копейки.
#
# Пример использования:
#
# $to_pay(123456.78) $to_pay_nds($to_pay/6)
#
# <h2>Сумма предоплаты за услуги: ^number_format[^to_pay.format[%.2f];,;.](2) руб.</h2>
# <p><i>Cумма прописью: ^int2str:money2str($to_pay)</i></p>
# <p><i>В том числе налог: ^number_format[^to_pay_nds.format[%.2f];,;.](2) руб.</i></p>
#
# (c) Виктор Смирнов vsmirnov@uwc.ru 2003
#
@auto[]
# Таблица написания чисел.
# Там где нужно, указываем мужской (m) и женский (f) род числительного.
$dstr[
	$.0[ноль]
	$.1[
		$.m[один]
		$.f[одна]
	]
	$.2[
		$.m[два]
		$.f[две]
	]
	$.3[три]
	$.4[четыре]
	$.5[пять]
	$.6[шесть]
	$.7[семь]
	$.8[восемь]
	$.9[девять]

	$.10[десять]
	$.11[одиннадцать]
	$.12[двенадцать]
	$.13[тринадцать]
	$.14[четырнадцать]
	$.15[пятнадцать]
	$.16[шестнадцать]
	$.17[семнадцать]
	$.18[восемнадцать]
	$.19[девятнадцать]

	$.20[двадцать]
	$.30[тридцать]
	$.40[сорок]
	$.50[пятьдесят]
	$.60[шестьдесят]
	$.70[семьдесят]
	$.80[восемьдесят]
	$.90[девяносто]

	$.100[сто]
	$.200[двести]
	$.300[триста]
	$.400[четыреста]
	$.500[пятьсот]
	$.600[шестьсот]
	$.700[семьсот]
	$.800[восемьсот]
	$.900[девятьсот]
]
$lstr[
	$.0[
		$._default[]
	]
	$.1[
		$.gender[f]
		$.1[тысяча]
		$.2[тысячи]
		$.3[тысячи]
		$.4[тысячи]

		$.11[тысяч]
		$.12[тысяч]
		$.13[тысяч]
		$.14[тысяч]
		$.other[тысяч]
	]
	$.2[
		$.gender[m]
		$.1[миллион]
		$.2[миллиона]
		$.3[миллиона]
		$.4[миллиона]

		$.11[миллионов]
		$.12[миллионов]
		$.13[миллионов]
		$.14[миллионов]
		$.other[миллионов]
	]
	$.3[
		$.gender[m]
		$.1[миллиард]
		$.2[миллиарда]
		$.3[миллиарда]
		$.4[миллирда]

		$.11[миллиардов]
		$.12[миллиардов]
		$.13[миллиардов]
		$.14[миллиардов]
		$.other[миллиардов]
	]
]

$drub[
	$.1[рубль]
	$.2[рубля]
	$.3[рубля]
	$.4[рубля]
	$._default[рублей]
]
$dcop[
	$.1[коп.]
	$.2[коп.]
	$.3[коп.]
	$.4[коп.]
	$._default[коп.]
]

#$dcop[$.1[копейка]$.2[копейки]$.3[копейки]$.4[копейки]$._default[копеек]]
#############################
# Выводит число прописью (от 0 до 999).
# i - записываемое число
# gender - род ( m - мужской, f - женский )
#
@sint2str[i;gender][a;b;c;d;res]
# Обрабатываем числа, написание которых есть в хэше $dstr
^if(def $dstr.$i){
	^if($dstr.$i is string){
		$result[$dstr.$i]
	}{
		$result[$dstr.$i.$gender]
	}
}{
# $i = $a + $b, $a = n*100, 0 <= $b < 100
	$a($i-$i%100)
	$b($i%100)
	^if($a > 0){ $result[$dstr.$a ] }
# Здесь $b > 0, иначе мы бы уже нашли наше число в хэше $dstr
	^if(def $dstr.$b){
		^if($dstr.$b is string){
			$result[${result}$dstr.$b]
		}{
			$result[${result}$dstr.$b.$gender]
		}
	}{
# $b = $c + $d, $c = m*10, 0<= $d < 10
		$d($b%10)
		$c($b-$d)
		^if($c>0){ $result[${result}$dstr.$c ] }
		^if($d>0){ $result[${result}^if($dstr.$d is string){$dstr.$d}{$dstr.$d.$gender}] }
	}
}

#############################
# Выводит (положительное) число прописью.
# i - записываемое число типа int
# gender - род ( m - мужской, f - женский )
# если определена upper, первую букву делаем заглавной.
@int2str[i;gender;upper][n;k;g;d;fl]
^if($i == 0){
	$result[^sint2str($i)[$gender]]
}{
# Представляем наше число в виде
# Шаг 0: $i = n0*1000 + x0, где 0<x0<1000
# Шаг 1: n0 = n1*1000 + x1, где 0<x1<1000
# ...
# На шаге номер k нам нужно записать число 10^(3*k) в форме, зависящей
# от 2-х последних цифр числа nk, конечно, если nk > 0.
# И число xk, если xk > 0. Род числа x0 задается параметром gender, род числа xk равен
# роду числа 10^(3*k).

	$n($i)
	$k(0)
	$g[$gender]
	^while($n > 0){
		^if( $n%1000 > 0 ){
# сначала проверяем, есть ли особое написание для n*10^(3*k) по последним 2 знакам числа n
# потом по одному последнему знаку. если особого написания нет, берем написание по умолчанию
			$d($n%100)
			^if(!def $lstr.$k.$d){ $d($n%10) }
			^if(!def $lstr.$k.$d){ $d[other] }
			$result[^sint2str($n%1000)[$g] $lstr.$k.$d ${result}]
		}
		^k.inc(1)
		$g[$lstr.$k.gender]
		$n($n\1000)
	}
	^if(def $upper){
		$fl[^result.left(1)]
		$result[^fl.upper[]^result.mid(1)]
	}
}

#############################
# Записываем положительное число (double) в виде:
# количество рублей прописью с большой буквы и копеек цифрами
# amount - сколько денег будем записывать
@money2str[amount][rub;cop;res]
$tmm[$amount]
^if(def $tmm){$tmm[^tmm.split[.;lh]]}
	$rub(^math:trunc($amount)) # Рубли - целая часть числа
	$rub($tmm.0)
# Если сделать $cop(^math:trunc(^math:frac($amount)*100))
# по непонятной мне причине $amount = 123.21 дает $cop = 20
	$cop(^math:frac($amount)*100) # Копейки - два знака после запятой
	$cop(^cop.int[])
	$cop($tmm.1)
	$result[^int2str($rub)[m;upper]]
# Для числей от 10 до 20 нужно писать рублей, иначе в зависимости от последнего знака
	^if($rub%100 < 20){ $d($rub%100) }{ $d($rub%10) }
	$result[${result} $drub.$d $cop]
# Для копеек тоже самое, что и для рублей
	^if($cop%100 < 20){ $d($cop%100) }{ $d($cop%10) }
	$result[${result} $dcop.$d]
@money2str2[amount][rub;cop;res;tmm]
	$rub(^math:trunc($amount)) # Рубли - целая часть числа
# Если сделать $cop(^math:trunc(^math:frac($amount)*100))
# по непонятной мне причине $amount = 123.21 дает $cop = 20
	$cop(^math:frac($amount)*100) # Копейки - два знака после запятой
	$cop(^cop.int[])
	$result[^int2str($rub)[m;upper]]
# Для числей от 10 до 20 нужно писать рублей, иначе в зависимости от последнего знака
	^if($rub%100 < 20){ $d($rub%100) }{ $d($rub%10) }
	$result[${result} $drub.$d $cop]
# Для копеек тоже самое, что и для рублей
	^if($cop%100 < 20){ $d($cop%100) }{ $d($cop%10) }
#	$result[${result} $dcop.$d]